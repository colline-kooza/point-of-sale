generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String
  password                 String
  emailVerified            Boolean   @default(false)
  emailVerifiedDate        DateTime  @default(now())
  verifiactionRequestCount Int?
  verifiactionToken        String?
  token                    String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  Profile                  Profile[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String
  description String?
  dishes      Dish[]
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
}

model Dish {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle    String
  amount      Int
  qty         Int
  description String?
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      String[]
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  categoryId  String   @db.ObjectId
  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?  @db.ObjectId
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  total         Float?
  orderId       String
  status        String   @default("just now")
  paymentMethod String
  tableNumber   String
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  items         Dish[]
}

model Table {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  tableNumber Int
}

model ContactUs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  email     String
  phone     String?
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  image       String?
  username    String?
  phoneNumber String?
  dateOfBirth DateTime?
  bio         String?
  address     String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
